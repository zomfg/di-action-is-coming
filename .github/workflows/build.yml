name: Build

on:
  push:
    # branches: [ master ]
    tags: [ '5.11.2.*' ] # release tag => create draft release, would pre-release tag trigger?
  pull_request:
    types: [ closed ] # not enough, have to check for merge

jobs:
  win_build:
    name: windows build
    runs-on: ubuntu-latest
    steps:
      - name: build
        run: |
          echo "this is some win build" > build-win.txt
          # zip --junk-paths build-win.zip build.txt

      - name: Upload Package
        uses: actions/upload-artifact@v2
        with:
          name: build-win.txt
          path: build-win.txt

  mac_build:
    name: mac build
    runs-on: ubuntu-latest
    steps:
      - name: build
        run: |
          echo "this is some mac build" > build-mac.txt
          # zip --junk-paths build-mac.zip build.txt

      - name: Upload Package
        uses: actions/upload-artifact@v2
        with:
          name: build-mac.txt
          path: build-mac.txt


  dpkg_build:
    name: ubuntu ${{ matrix.os }} build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          - '18.04'
          - '20.04'
          - '20.10'

    steps:
      - name: build
        run: |
          echo "this is some ubuntu ${{ matrix.os }} build" > build-ubuntu-${{ matrix.os }}.txt
          # zip --junk-paths build-ubuntu-${{ matrix.os }}.zip build.txt

      - name: Upload Package
        uses: actions/upload-artifact@v2
        with:
          name: build-ubuntu-${{ matrix.os }}.txt
          path: build-ubuntu-${{ matrix.os }}.txt


  pre_release:
    name: pre-release
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && startsWith(github.head_ref, 'hotfix/')
    # + if branch hotfix/* feature/*
    # github.event.pull_request.number
    # github.event.pull_request.title
    runs-on: ubuntu-latest
    needs:
      - win_build
      - mac_build
      - dpkg_build
    steps:
      - name: prereleasing
        run: |
          echo pre-release
          echo ref/tag ${{ github.ref }}
          echo head_ref ${{ github.head_ref }}
          echo PR number ${{ github.event.pull_request.number }}
          echo PR title ${{ github.event.pull_request.title }}

      - name: download artifacts
        uses: actions/download-artifact@v2

      - name: list artifacts
        run: ls -l

      - name: get version name
        run: |
          VERSION=5.11.2.26-pre`date +%Y%m%d%H%M%S`
          echo "PR_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create Pre-Release
        # if: ${{ never() }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PR_VERSION }}
          release_name: Pre-release ${{ env.PR_VERSION }}
          body: '${{ github.event.pull_request.title }} (#${{ github.event.pull_request.number }})'
          draft: false
          prerelease: true

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ASSET_URL: ${{ steps.create_release.outputs.upload_url }}
        run: |
          cat << EOF | python --
          import mimetypes
          import os
          import requests

          for file in os.listdir('.'):
            with open(file, 'rb') as asset:
              token=os.environ['GITHUB_TOKEN']
              headers = {
                'user-agent': os.environ['GITHUB_REPOSITORY'],
                'authorization': "token " + token,
                'content-type': mimetypes.guess_type(file)[0],
                'content-size': os.stat(file).st_size
              }
              url=os.environ['ASSET_URL'].replace('{?name,label}','')
              requests.post(url + "?name=" + file, headers=headers, files={f:asset})
          EOF
